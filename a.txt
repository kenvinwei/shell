<?php

namespace Modules\Pay\Services;

use BankLink\BankLink;
use Define\Constant\OperationAction;
use Modules\Approval\Services\ApprovalFlowServices;
use Modules\Leader\Services\ThreeWithdrawal;
use Modules\Pay\Models\PayHandling;
use Modules\Pay\Models\Tranfer;
use Modules\RabbitMq\Services\MqServices;
use Modules\Wallet\Services\WalletServices;
use Phalcon\Mvc\Model\Transaction\Manager;
use Phalcon\Mvc\Model\TransactionInterface;

class PayServices
{
	/**
	 * 列表
	 *
	 * @param $where
	 * @param $offset
	 *
	 * @return array
	 * @throws \Exception
	 */
	public static function getLists($where, $offset, $org)
	{
		$res          = PayHandling::getLists($where, $offset);
		$supplierSign = [];
		if (!empty($res)) {
			$supplierMaster = array_column($res, 'supplierMasterId');
			if (!empty($supplierMaster)) {
				$supplierSign = \SupplierMaster::find([
					'supplier_master_id in ({id:array})',
					'bind'    => [
						'id' => $supplierMaster,
					],
					'columns' => 'sign_contract_type,supplier_master_id',
				])->toArray();
				$supplierSign = array_column($supplierSign, 'sign_contract_type', 'supplier_master_id');
			}
			$payAccountId = array_values(array_unique(array_column($res, 'payHandlingPayAccountId')));

			$payAccount = \PayAccount::find([
				'payAccountId IN ({id:array})',
				'bind'    => [
					'id' => $payAccountId,
				],
				'columns' => 'payAccountId,registeredCodeName',
			])->toArray();
			if (!empty($payAccount)) {
				$payAccount = array_column($payAccount, 'registeredCodeName', 'payAccountId');
			}
			if (!empty($res)) {

				foreach ($res as $k => $v) {
					$res[$k]['payHandlingVerifyStatus'] = \PayHandling::$verifyStatus[$v['payHandlingVerifyStatus']];
					$res[$k]['payHandlingPayStatus']    = \PayHandling::$payStatus[$v['payHandlingPayStatus']];
					$res[$k]['payHandlingPayTime']      = empty($v['payHandlingPayTime']) ? '' : date('Y-m-d H:i:s',
						$v['payHandlingPayTime']);
					$res[$k]['payHandlingHopeTime']     = date('Y-m-d H:i:s', $v['payHandlingHopeTime']);
					$res[$k]['payHandlingCurrency']     = \SupplierMaster::$cointypeList[$v['payHandlingCurrency']];
					$res[$k]['payHandlingType']         = \PayHandling::$remittanceType[$v['payHandlingType']];
					$res[$k]['payHandlingMode']         = \PayHandling::$settlementType[$v['payHandlingMode']];
					$res[$k]['payHandlingMoney']        = $v['payHandlingMoney'] / 100;
					$res[$k]['payHandlingOverCode']     = empty($v['payHandlingOverCode']) ? '' : $v['payHandlingOverCode'];
					$res[$k]['payHandlingReceipt']      = empty($v['payHandlingReceipt']) ? '' : $v['payHandlingReceipt'];
					$res[$k]['name']                    = $v['collectName'];
					$res[$k]['bank']                    = $v['collectBankBranch'];
					$res[$k]['number']                  = $v['payHandlingCollectAccount'];
					$res[$k]['open']                    = $v['collectBankOpen'];
//				$res[$k]['address']                 = $v['collectBankOpen'];
					$res[$k]['org']              = $org[$v['orgId']];
					$res[$k]['type']             = \SupplierMaster::$supplierType[$v['type']];
					$res[$k]['isReturn']         = \PayHandling::$return[$v['isReturn']];
					$res[$k]['supplierName']     = $v['suppliername'];
					$res[$k]['payAccountName']   = $payAccount[$v['payHandlingPayAccountId']];
					$res[$k]['signContractType'] = \SupplierMaster::$signContractTypeList[$supplierSign[$v['supplierMasterId']]];
				}
			}
		}

		return $res;
	}

	/**
	 * 获取收款账户详情
	 *
	 * @param $collectId
	 *
	 * @return array
	 * @throws \Exception
	 */
	public static function getColletInfo($collectId)
	{
		$collect = \CollectAccount::find([
			'accountId IN ({ids:array})',
			'bind' => [
				'ids' => $collectId,
			],
		])
			->toArray();
		if (empty($collect)) {
			throw new \Exception('没有可用的收款账户');
		}
		$res = [];

		foreach ($collect as $k => $v) {
			$res[$v['accountId']]['name']    = $v['name'];
			$res[$v['accountId']]['bank']    = $v['bankBranch'];
			$res[$v['accountId']]['number']  = $v['account'];
			$res[$v['accountId']]['open']    = $v['bankOpening'];
			$res[$v['accountId']]['address'] = $v['address'];
		}

		return $res;
	}

	/**
	 * 删除
	 *
	 * @param $id
	 *
	 * @throws \Exception
	 */
	public static function delete($id)
	{
		PayHandling::delete($id);

	}

	/**
	 * 获取详情
	 *
	 * @param $id
	 *
	 * @return array
	 * @throws \Exception
	 */
	public static function getInfo($id)
	{
		$res  = [];
		$data = PayHandling::getDetail($id);
		$data = $data->toArray();
		if (!empty($data)) {
			if ($data['payHandlingCollectAccountId'] != 0) {
				$collectInfo = self::getColletInfo([$data['payHandlingCollectAccountId']]);
				$supplier    = \SupplierMaster::findFirst([
					'supplier_master_id =:id:',
					'bind'    => [
						'id' => $data['supplierMasterId'],
					],
					'columns' => 'supplier_master_id,name',
				]);

				if (!$supplier) {
					throw new \Exception("收款账户不存在");
				}
				$supplier             = $supplier->toArray();
				$data['supplierName'] = $supplier['name'];
				$data['name']         = $collectInfo[$data['payHandlingCollectAccountId']]['name'];
				$data['bank']         = $collectInfo[$data['payHandlingCollectAccountId']]['bank'];
				$data['number']       = $collectInfo[$data['payHandlingCollectAccountId']]['number'];
				$data['open']         = $collectInfo[$data['payHandlingCollectAccountId']]['open'];
				$data['address']      = $collectInfo[$data['payHandlingCollectAccountId']]['address'];
			} else {
				$bills = \BillsPayable::findFirst([
					'billsPayableId = :id:',
					'bind' => [
						'id' => $data['payHandlingBillsPayableId'],
					],
				]);
				if (!$bills) {
					throw new \Exception("不存在的应付单");
				}
				$supplier = \ThreeWithdrawal::findFirst([
					'threeWithdrawalId = :id:',
					'bind' => [
						'id' => $bills->billsPayableAccountId,
					],
					'threeWithdrawalId,customerName',
				]);
				if (!$supplier) {
					throw new \Exception("收款账户不存在");
				}
				$supplier             = $supplier->toArray();
				$data['supplierName'] = $supplier['customerName'];
				$data['name']         = $supplier['holder'];
				$data['bank']         = $supplier['bankbranch'];
				$data['number']       = $supplier['bankaccount'];
				$data['open']         = $supplier['bankhead'];
				$data['address']      = $supplier['bankhead'] . $supplier['bankbranch'];
			}
			$res['verify']                   = self::getVerify($data['payHandlingId']);
			$data['payHandlingVerifyStatus'] = \PayHandling::$verifyStatus[$data['payHandlingVerifyStatus']];
			$data['payHandlingPayStatus']    = \PayHandling::$payStatus[$data['payHandlingPayStatus']];
			$data['payHandlingPayTime']      = empty($data['payHandlingPayTime']) ? '' : date('Y-m-d H:i:s',
				$data['payHandlingPayTime']);
			$data['payHandlingHopeTime']     = date('Y-m-d H:i:s', $data['payHandlingHopeTime']);
			$data['payHandlingCurrency']     = \SupplierMaster::$cointypeList[$data['payHandlingCurrency']];
			$data['payHandlingType']         = \PayHandling::$remittanceType[$data['payHandlingType']];
			$data['payHandlingMode']         = \PayHandling::$settlementType[$data['payHandlingMode']];
			$data['payHandlingMoney']        = $data['payHandlingMoney'] / 100;

			$payAccount = \PayAccount::findFirst([
				'payAccountId =:id:',
				'bind'    => [
					'id' => $data['payHandlingPayAccountId'],
				],
				'columns' => 'payAccountId,registeredCodeName',
			])->toArray();

			$data['payAccountName'] = $payAccount['registeredCodeName'];
			$res['data']            = $data;
		}

		return $res;
	}

	/**
	 * 获取审批详情
	 *
	 * @param $verifyId
	 *
	 * @return mixed
	 * @throws \Exception
	 */
	public static function getVerify($verifyId)
	{
		$data = ['businessType' => BANK_PAYMENT, 'businessId' => $verifyId];

		return ApprovalFlowServices::getApprovalList($data);
	}

	/**
	 * 制单
	 *
	 * @param $data array
	 *
	 * @return array|bool
	 * @throws \Exception
	 */
	public static function OrderMake($data, TransactionInterface $transction)
	{

		//查询应付单详情
		$billRes = \BillsPayable::find([
			'billsPayableId IN ({ids:array}) AND billsPayableMaking = ' . \BillsPayable::MAKING_FALSE,
			'bind'    => [
				'ids' => $data['id'],
			],
			'columns' => 'billsPayableSupplierId,billsPayableMoney,billsPayableCode,billsPayableAccount,billsPayableId,billsPayableDingCode,billsPayableAccountType,billsPayableAccountId,billsPayableSupplierName',
		])->toArray();
		if (empty($billRes) || (count($billRes) != count($data['id']))) {
			$transction->rollback('制单列表中存在已制单的应付单或应付单不存在！');
		}

		//查询选择的付款银行是否正确
		$payAccount = \PayAccount::findFirst([
			'payAccountId = :id: and status=:status:',
			'bind' => [
				'id'     => $data['payAccount'],
				'status' => \PayAccount::STATUS_ENABLE,
			],
		])->toArray();
		if (!$payAccount) {
			$transction->rollback('付款银行不存在,请稍后再试！');
		}
		$payData = [];
		//获取用途
		$useSetting = \Settinginfo::find([
			'key IN({key:array}) and isDel = :del:',
			'bind' => [
				'key' => ["personalPayUse", "companyPayUse"],
				'del' => \Settinginfo::DEL_FALSE,
			],
		]);
		if (empty($useSetting)) {
			$transction->rollback('用途不存在,请稍后再试！');
		}
		$useSetting                               = $useSetting->toArray();
		$useSetting                               = array_column($useSetting, 'value', 'key');
		$useSetting[\SupplierMaster::COMPANY_NO]  = json_decode($useSetting['personalPayUse'], true);
		$useSetting[\SupplierMaster::COMPANY_YES] = json_decode($useSetting['companyPayUse'], true);
		unset($useSetting['personalPayUse'], $useSetting['companyPayUse']);
		//根据type字段对数组进行分组
		$bill = self::group($billRes);
		if (!empty($bill['three'])) {
			//第三方支付单，BIW无相关商户和收款账户信息
			$id       = array_column($bill['three'], 'billsPayableAccountId');
			$customer = \ThreeWithdrawal::find([
				'threeWithdrawalId IN ({id:array})',
				'bind' => [
					'id' => $id,
				],
			])->toArray();
			if (count(array_unique($id)) != count($customer)) {
				$transction->rollback('制单列表中存在无商户的情况！');
			}
			$collectAccount  = array_column($customer, 'bankaccount', 'threeWithdrawalId');
			$collectName     = array_column($customer, 'holder', 'threeWithdrawalId');
			$collecBank      = array_column($customer, 'bankbranch', 'threeWithdrawalId');
			$collecBankOpen  = array_column($customer, 'bankhead', 'threeWithdrawalId');
			$supplierOrg     = array_column($customer, 'orgId', 'threeWithdrawalId');
			$supplierCompany = array_column($customer, 'isCompany', 'threeWithdrawalId');
			$supplierCmb     = array_column($customer, 'isCmb', 'threeWithdrawalId');
			$supplierSubject = array_column($customer, 'subject', 'threeWithdrawalId');

			foreach ($bill['three'] as $k => $v) {

				$pre = $data['org'][$v['orgId']];
				if ($pre == '') {
					$pre = "SHTZF";
				}

				$dataOne['pay_handling_code']               = self::getCode($pre);
				$dataOne['pay_handling_bills_payable_id']   = $v['billsPayableId'];
				$dataOne['pay_handling_bills_payable_code'] = $v['billsPayableCode'];
				$dataOne['pay_handling_hope_time']          = time();
				$dataOne['pay_handling_collect_account_id'] = 0; //todo 因为是第三方商户，先给默认值
				$dataOne['pay_handling_collect_account']    = $collectAccount[$v['billsPayableAccountId']];
				$dataOne['pay_handling_pay_account']        = $payAccount['account'];
				$dataOne['pay_handling_pay_account_id']     = (int)$data['payAccount'];
				$dataOne['pay_handling_mode']               = \PayHandling::SETTLEMENT_FAST;
				$dataOne['pay_handling_currency']           = 1; //人民币
				$dataOne['pay_handling_money']              = $v['billsPayableMoney'];
				$dataOne['pay_handling_remark']             = $v['billsPayableAccount'] . '-' . $dataOne['pay_handling_code'] . "-" . "POP";
				$dataOne['pay_handling_type']               = \PayHandling::REMITTANCE_ORDINARY;
				$dataOne['pay_handling_create_user']        = (int)$data['userId'];
				$dataOne['pay_handling_user']               = $data['userName'];
				$dataOne['collect_type']                    = $supplierCompany[$v['billsPayableAccountId']];
				$dataOne['collect_name']                    = $collectName[$v['billsPayableAccountId']];
				$dataOne['collect_bank_branch']             = $collecBank[$v['billsPayableAccountId']];
				$dataOne['collect_bank_open']               = $collecBankOpen[$v['billsPayableAccountId']];
				$dataOne['collect_cmb']                     = $supplierCmb[$v['billsPayableAccountId']];
				$dataOne['org_id']                          = $supplierOrg[$v['billsPayableAccountId']];
				$dataOne['type']                            = 0;
				$dataOne['supplier_master_id']              = $v['billsPayableSupplierId'];
				$dataOne['suppliername']                    = $v['billsPayableSupplierName'];
				$dataOne['ding_code']                       = $v['billsPayableDingCode'];
				$dataOne['account_type']                    = $v['billsPayableAccountType'];
				$dataOne['pay_handling_purpose']            = $useSetting[$dataOne['collect_type']][$v['billsPayableAccountType']];
				//创建支付经办
				$payData[]                              = $dataOne;
				$subject[$dataOne['pay_handling_code']] = $supplierSubject[$v['billsPayableAccountId']];
				//修改应付单的是否制单字段
				$billPayable[] = $v['billsPayableId'];

			}

		}
		if (!empty($bill['one'])) {
			//BIW内部支付单，商户和账户信息存在自己的表中
			//查询商户的基础信息
			$id             = array_column($bill['one'], 'billsPayableSupplierId');
			$supplierdetail = \SupplierMaster::find([
				'supplier_master_id IN ({ids:array})',
				'bind'    => [
					'ids' => $id,
				],
				'columns' => 'type,org_id,is_company,is_cmb,supplier_master_id,sign_contract_type',
			])->toArray();

			if (count(array_unique($id)) != count($supplierdetail)) {
				$transction->rollback('制单列表中存在无商户的情况！');
			}

			//收款账户信息
			$collect = \CollectAccount::find([
				'supplierid IN ({ids:array})',
				'bind'    => [
					'ids' => $id,
				],
				'columns' => 'accountId,account,name,bankBranch,bankOpening,supplierid as supplier_master_id',
			])->toArray();
			if (!$collect) {
				$transction->rollback('请先维护商户的银行账户信息！');
			}
			$collectAccountId = array_column($collect, 'accountId', 'supplier_master_id');
			$collectAccount   = array_column($collect, 'account', 'supplier_master_id');
			$collectName      = array_column($collect, 'name', 'supplier_master_id');
			$collecBank       = array_column($collect, 'bankBranch', 'supplier_master_id');
			$collecBankOpen   = array_column($collect, 'bankOpening', 'supplier_master_id');
			$supplierType     = array_column($supplierdetail, 'type', 'supplier_master_id');
			$supplierOrg      = array_column($supplierdetail, 'org_id', 'supplier_master_id');
			$supplierCompany  = array_column($supplierdetail, 'is_company', 'supplier_master_id');
			$supplierCmb      = array_column($supplierdetail, 'is_cmb', 'supplier_master_id');
			$supplierSubject  = array_column($supplierdetail, 'sign_contract_type', 'supplier_master_id');

			if (count($collectName) != count(array_filter($collectName))) {
				$transction->rollback('请先维护商户的银行账户信息！');
            }
			if (count($collecBank) != count(array_filter($collecBank))) {
				$transction->rollback('请先维护商户的银行账户信息！');
            }
			if (count($collecBankOpen) != count(array_filter($collecBankOpen))) {
				$transction->rollback('请先维护商户的银行账户信息！');
            }
			if (count($collectAccount) != count(array_filter($collectAccount))) {
				$transction->rollback('请先维护商户的银行账户信息！');
            }

			foreach ($bill['one'] as $k => $v) {
				if (array_flip(\BillsPayable::$isMaking)[$v['billsPayableMaking']] == \BillsPayable::MAKING_TRUE) {
					$transction->rollback('您已制单成功,不允许重复制单！');
				}
				if (IS_DEVELOP) {
					if ($v['billsPayableMoney'] > 100) {
						$transction->rollback('测试环境不允许支付大于1块钱的数据！');
					}
				}
				$org = $supplierOrg[$v['billsPayableSupplierId']];
				$pre = $data['org'][$org];
				if ($pre == '') {
					$pre = "SHTZF";
				}
				$dataOne['pay_handling_code']               = self::getCode($pre);
				$dataOne['pay_handling_bills_payable_id']   = $v['billsPayableId'];
				$dataOne['pay_handling_bills_payable_code'] = $v['billsPayableCode'];
				$dataOne['pay_handling_hope_time']          = time();
				$dataOne['pay_handling_collect_account_id'] = $collectAccountId[$v['billsPayableSupplierId']];
				$dataOne['pay_handling_collect_account']    = $collectAccount[$v['billsPayableSupplierId']];
				$dataOne['pay_handling_pay_account']        = $payAccount['account'];
				$dataOne['pay_handling_pay_account_id']     = (int)$data['payAccount'];
				$dataOne['pay_handling_mode']               = \PayHandling::SETTLEMENT_FAST;
				$dataOne['pay_handling_currency']           = 1; //人民币
				$dataOne['pay_handling_money']              = $v['billsPayableMoney'];
				$dataOne['pay_handling_remark']             = $v['billsPayableAccount'] . '-' . $dataOne['pay_handling_code'] . "-" . 'POP';
				$dataOne['pay_handling_type']               = \PayHandling::REMITTANCE_ORDINARY;
				$dataOne['pay_handling_create_user']        = (int)$data['userId'];
				$dataOne['pay_handling_user']               = $data['userName'];
				$dataOne['collect_type']                    = $supplierCompany[$v['billsPayableSupplierId']];
				$dataOne['collect_name']                    = $collectName[$v['billsPayableSupplierId']];
				$dataOne['collect_bank_branch']             = $collecBank[$v['billsPayableSupplierId']];
				$dataOne['collect_bank_open']               = $collecBankOpen[$v['billsPayableSupplierId']];
				$dataOne['collect_cmb']                     = $supplierCmb[$v['billsPayableSupplierId']];
				$dataOne['type']                            = $supplierType[$v['billsPayableSupplierId']];
				$dataOne['org_id']                          = $supplierOrg[$v['billsPayableSupplierId']];
				$dataOne['supplier_master_id']              = $v['billsPayableSupplierId'];
				$dataOne['suppliername']                    = $v['billsPayableSupplierName'];
				$dataOne['ding_code']                       = $v['billsPayableDingCode'];
				$dataOne['account_type']                    = $v['billsPayableAccountType'];
				$dataOne['pay_handling_purpose']            = $useSetting[$dataOne['collect_type']][$v['billsPayableAccountType']];

				//创建支付经办
				$payData[]                              = $dataOne;
				$subject[$dataOne['pay_handling_code']] = $supplierSubject[$v['billsPayableSupplierId']];
				//修改应付单的是否制单字段
				$billPayable[] = $v['billsPayableId'];
			}
		}

		$verifyData = [];
		//创建支付经办单
		$res = PayHandling::AddMore($payData);

		if (!$res) {
			$transction->rollback('支付经办单创建失败');
		}
		$payHandlingVerify = \PayHandling::find([
			'payHandlingCode IN ({code:array})',
			'bind' => [
				'code' => array_column($payData, 'pay_handling_code'),
			],
		]);


		$billRes = \Modules\BillsPayable\Models\BillsPayable::update($billPayable, $data['userId'], $data['userName']);
		if (!$billRes) {
			$transction->rollback('支付经办单创建成功后,修改应付单状态失败');
		}

		$transction->commit();

		foreach ($payHandlingVerify as $k => $v) {
			$verifyData['type']               = \PayHandling::BANK_TYPE;
			$verifyData['billId']             = $v->payHandlingId;
			$verifyData['billNum']            = $v->payHandlingCode;
			$verifyData['money']              = $v->payHandlingMoney;
			$verifyData['org']                = $v->orgId;
			$verifyData['sign_contract_type'] = $subject[$v->payHandlingCode];
			$verifyData['supplier_type']      = $v->type != 0 ? $v->type : \Supplier::SELF_SUPPORT;
			container('logger')->info(__FUNCTION__, ['info' => "自动送审的支付经办内容为" . json_encode($verifyData)]);
			$res = \MqCommon::pushMQ("sync_bank_link_status", $verifyData);
			if (!$res) {
				container('logger')->error(__FUNCTION__,
					['info' => '存储支付经办回单mq失败，数据为：' . json_encode($data)]);
			}
		}

		//推送用户服务中心
        MqServices::pushOperationLogMq(OperationAction::PAY_MAKING_ORDER, $data, [], $data['id']);

		$result = ['pay_handling' => $res, 'bill' => $billRes];

		return $result;
	}

	/**
	 * 数组进行分组整理
	 * @param $arr
	 * @return array one 代表BIW过来的有商户的支付单  three代表第三方复用，BIW无此商户
	 */
	public static function group($arr)
	{
		$res = [];
		foreach ($arr as $k => $v) {
			if (in_array($v['billsPayableAccountType'], \ThreeWithdrawal::TYPE)) {
				$res['three'][] = $v;
			} else {
				$res['one'][] = $v;
			}
		}

		return $res;
	}


	/**
	 * 生成支付经办单号
	 */
	public static function getCode($pre): string
	{
		$date = date('ymd', time());
		if (IS_DEVELOP) {
			$pre = $pre . 'C';
		}
		$rediskey = $pre . $date;
		$key      = container('cache')->increment($rediskey);
		$key      = \YHDX\OrderCodeGenerated::dispRepair($key, 4, 0);
		$result   = $pre . $date . $key;

		return $result;
	}

	/**
	 * 提交送审
	 *
	 * @param $type
	 * @param $payHandlingId
	 * @param $userId
	 * @param $verify
	 * @param $remark
	 *
	 * @throws \Exception
	 */
	public static function verify($type, $payHandlingId, $userId, $verify, $remark)
	{
		$data = \PayHandling::findFirst([
			'payHandlingId =:id:',
			'bind' => [
				'id' => $payHandlingId,
			],
		]);
		if (empty($data)) {

			throw new \Exception("没有获取到此条订单信息");
		}
		if ($data->payHandlingVerifyStatus == \PayHandling::VERIFY_COMPLETE) {
			throw new \Exception("单子已结束审核,请勿重复点击");
		}

		//请求单据审批
		$approvalData = [
			'businessId'   => $payHandlingId,
			'businessType' => BANK_PAYMENT,
			'userId'       => $userId,
			'remark'       => $remark ?: '',
			'status'       => $verify,
		];

		$approvalHandleRes = \YHDX\ApprovalApi::handelApproval($approvalData);
		if ($approvalHandleRes['code']) {
			//失败
			throw new \Exception($approvalHandleRes['msg']);

		}

	}

	/**
     * 创建支付经办单
     *
     * @throws \Exception
     */
    public static function createPayHandling()
    {
        $redis = container('redis');
        $key = '_PHCRERP:createPayHandlingKey';

        try {
            echo 1;
            $lock = $redis->set($key, 1, ['nx', 'ex' => 60]);
            if ($lock) {
                echo 2;
                container('db')->begin();
                $data = \PayHandling::findFirst([
                    'payHandlingVerifyStatus =:status: AND payHandlingPayStatus=:pay: AND isDel = :is_del:',
                    'bind' => [
                        'status' => \PayHandling::VERIFY_COMPLETE,
                        'pay'    => \PayHandling::PAY_NO,
                        'is_del' => \PayHandling::DEL_FALSE,
                    ],
                ]);
                if (APP_ENV == 'pre') {
                    $data = \PayHandling::findFirst([
                        'payHandlingVerifyStatus =:status: AND payHandlingPayStatus=:pay: AND isDel = :is_del: AND supplierMasterId = :supplier_master_id:',
                        'bind' => [
                            'status' => \PayHandling::VERIFY_COMPLETE,
                            'pay'    => \PayHandling::PAY_NO,
                            'is_del' => \PayHandling::DEL_FALSE,
                            'supplier_master_id' => 53715
                        ],
                    ]);
                }
                echo 3;
                container('db')->commit();
                if (!$data) {
                    container('logger')->error(__FUNCTION__, ['info' => "不存在的支付经办单"]);
                    throw new \Exception('不存在的支付经办单');
                }

                $resultMessage = "制单成功";
                //组装请求招行的参数
                $param['unique_order_id']    = $data->payHandlingCode;
                $param['business_type']      = $data->collectType;
                $param['payee']              = $data->collectName;
                $param['collection_account'] = $data->payHandlingCollectAccount;
                $param['payment_account']    = $data->payHandlingPayAccount;
                $param['money']              = $data->payHandlingMoney / 100;
                $param['abstract']           = $data->payHandlingPurpose;
                if ($data->collectType == \SupplierMaster::COMPANY_YES) {
                    $param['purpose'] = $data->payHandlingPurpose;
                } else {
                    $param['purpose'] = $data->payHandlingRemark;
                }
                //根据电子联行号判断,如果有就传电子联行号，没有就传开户地和开户网店
                $param['opening_bank']    = $data->collectBankOpen;
                $param['opening_address'] = $data->collectBankBranch;
                $param['is_cmb']          = $data->collectCmb == \SupplierMaster::CMB_YES ? 'Y' : 'N';
                $res                      = BankLink::getInstance()->payOrder($param);

                $manager     = new \Phalcon\Mvc\Model\Transaction\Manager();
                $transaction = $manager->get();

                $payHandlingWhere =  [
                     'pay_handling_pay_status' => \PayHandling::PAY_NO,
                     'pay_handling_id' => $data->payHandlingId,
                ];

                if ($res['success']) {
                    $batchNo = $res['data']['batch'];
                    if ($data->collectType ==\Supplier::COMPANY_NO && empty($batchNo)) {
                        $transaction->rollback('data.batch is null!');
                    }
                    $fieldArr = [
                        'pay_handling_pay_status' => \PayHandling::PAY_WAITE,
                        'result_message' => $resultMessage,
                        'pay_handling_other' => $res['data']['batch'],
                    ];
                } else {
                    $fieldArr = [
                        'pay_handling_pay_status' => \PayHandling::CREATE_FAIL,
                        'result_message' => "制单失败,失败原因：" . $res['message'],
                    ];
                    //修改应付单的状态
                    $bills                        = \BillsPayable::findFirst([
                        'billsPayableId = :id:',
                        'bind' => [
                            'id' => $data->payHandlingBillsPayableId,
                        ],
                    ]);

                    $bills->billsPayablePayStatus = \PayHandling::PAY_FAIL;
                    $billRes                      = $bills->update();

                    if (!$billRes) {
                        $transaction->rollback('billRes update fail!');
                    }
                    //判断如果是第三方的单子并且制单失败，进行单据修改
                    if (in_array($bills->billsPayableAccountType, \ThreeWithdrawal::TYPE)) {
                        ThreeWithdrawal::updateStatus([
                            'id'     => $bills->billsPayableAccountId,
                            'status' => \PayHandling::PAY_FAIL,
                            'msg'    => '银行制单失败',
                        ], $transaction);
                    }
                }

                //修改支付经办单的状态
                if ($data->pdoUpdate($fieldArr, $payHandlingWhere)) {
                    container('logger')->error(__FUNCTION__, ['info' => $data->payHandlingCode . "创建支付订单失败"]);
                    $transaction->rollback('创建支付订单失败');
                }

                $transaction->commit();

                //放进获取支付详情的队列
                $res = \MqCommon::pushMQ(PAY_HANDLING_CREAT, $data->toArray());
                if (!$res) {
                    container('logger')->error(__FUNCTION__,
                        ['info' => '存储支付经办创建mq失败，数据为：' . json_encode($data->toArray())]);
                }
            } else {
                container('logger')->error(__FUNCTION__,
                    ['info' => '加锁失败!']);
                throw new \Exception("加锁失败!");
            }
        } catch (\Exception $e){
            if ($e->getMessage() == 'User not logged in') {
                $data->pdoUpdate(['result_message' => $e->getMessage()], [
                     'pay_handling_pay_status' => \PayHandling::PAY_NO,
                     'pay_handling_id' => $data->payHandlingId,
                ]);

                $alarmMailer = container('config')->applyPaymentAlarmMailer->toArray();

		        // 发给公用
		        $alarmMailerArr = $alarmMailer['common'];
                container('mailer')->sendMail('银企支付未登录', '银企支付未登录'.date('Y-m-d H:i:s'), 'text/html', $alarmMailerArr);
            }
        } finally {
            $redis->del($key);
        }
    }


    /**
     * 支付确定支付失败
     * @param array $payHandling
     * @return bool
     */
    public static function isPayFail(array $payHandling) :bool
    {
        $param = [
            'business_type' => $payHandling['collectType'],
            'unique_id'     =>  $payHandling['collectType'] == \Supplier::COMPANY_YES ? $payHandling['payHandlingCode'] : $payHandling['payHandlingOther']
        ];

        //请求招行
        try {
            $codeRes = BankLink::getInstance()->getPaymentDetail($param);
            container('logger')->info(__FUNCTION__,
                ['info' => $payHandling['payHandlingCode'] . "请求招行详情返回的数据为" . json_encode($codeRes)]);
        } catch (\Exception $e) {
            container('logger')->info(__FUNCTION__, ['info' => $payHandling['payHandlingCode'] . "获取支付详情失败！"]);
            return false;
        }

        return $codeRes['data']['pay_status'] == \PayHandling::PAY_FAIL;
    }


	/**
	 * 获取支付详情
	 *
	 * @throws \Exception
	 */
	public static function getPayInfo()
	{
		$queue   = \MqCommon::getMQ(PAY_HANDLING_CREAT);
		$message = $queue->get();
		if (!$message) {
			container('logger')->info(__FUNCTION__, ['info' => "获取支付详情的队列为空！"]);
			throw new \Exception('获取支付详情的队列为空');
		}
		$data = $message->getBody();
		$queue->ack($message->getDeliveryTag());
		if (empty($data)) {
			container('logger')->info(__FUNCTION__, ['info' => "获取支付详情的队列为空！"]);
			throw new \Exception('获取支付详情的队列为空');
		}
		$payHandling = json_decode($data, true);
		//组装数据请求

		$param['business_type'] = $payHandling['collectType'];
		$param['unique_id']     = $payHandling['collectType'] == \Supplier::COMPANY_YES ? $payHandling['payHandlingCode'] : $payHandling['payHandlingOther'];

		//请求招行
		try {
			$codeRes = BankLink::getInstance()->getPaymentDetail($param);
			container('logger')->info(__FUNCTION__,
				['info' => $payHandling['payHandlingCode'] . "请求招行详情返回的数据为" . json_encode($codeRes)]);
		} catch (\Exception $e) {
			$res = \MqCommon::pushMQ(PAY_HANDLING_CREAT, $payHandling);
			if (!$res) {
				container('logger')->error(__FUNCTION__, ['info' => '存储支付经办创建mq失败，数据为：' . $data]);
			}
			container('logger')->info(__FUNCTION__, ['info' => $payHandling['payHandlingCode'] . "获取支付详情失败！"]);

			throw new \Exception('获取支付详情失败！');
		}

		$manager     = new \Phalcon\Mvc\Model\Transaction\Manager();
		$transaction = $manager->get();
		if (!$codeRes['success'] || empty($codeRes['data']['pay_status']) || ($codeRes['data']['pay_status'] == \PayHandling::PAY_COMPLETE && empty($codeRes['data']['serial_number'])) || empty($codeRes['data']['create_time'])) {

			$res = \MqCommon::pushMQ(PAY_HANDLING_CREAT, $payHandling);
			if (!$res) {
				container('logger')->error(__FUNCTION__, ['info' => '存储支付经办创建mq失败，数据为：' . $data]);
			}
			container('logger')->info(__FUNCTION__, ['info' => $payHandling['payHandlingCode'] . "获取支付详情失败！"]);

			$transaction->rollback('获取支付详情失败！');
		}

		if ($codeRes['data']['pay_status'] == $payHandling['payHandlingPayStatus']) {

			$res = \MqCommon::pushMQ(PAY_HANDLING_CREAT, $payHandling);
			if (!$res) {
				container('logger')->error(__FUNCTION__, ['info' => '存储支付经办创建mq失败，数据为：' . $data]);
			}
			container('logger')->info(__FUNCTION__,
				['info' => $payHandling['payHandlingCode'] . "获取支付详情的支付状态与原先的状态一致,无需修改！"]);

			$transaction->rollback('获取支付详情的支付状态与原先的状态一致,无需修改！');
		}

		//修改系统内部数据
		$pay = \PayHandling::findFirst([
			'payHandlingId = :id:',
			'bind' => [
				'id' => $payHandling['payHandlingId'],
			],
		]);

		if (!$pay) {

			container('logger')->error(__FUNCTION__,
				['info' => $payHandling['payHandlingCode'] . "支付经办单不存在,无法进行状态更新！"]);
			$transaction->rollback('支付经办单不存在,无法进行状态更新！');
		}
		$bills = \BillsPayable::findFirst([
			'billsPayableId = :id:',
			'bind' => [
				'id' => $payHandling['payHandlingBillsPayableId'],
			],
		]);

		$resultMessage = "支付成功";
		if (empty($codeRes['data']['serial_number'])) {
			$codeRes['data']['serial_number'] = 0;
			$resultMessage                    = $codeRes['message'];
		}
		//修改支付经办单的支付状态
		$pay->payHandlingOverCode     = $codeRes['data']['serial_number'];
		$pay->payHandlingPayStatus    = $codeRes['data']['pay_status'];
		$pay->payHandlingPayTime      = strtotime($codeRes['data']['create_time']);
		$pay->resultMessage           = $resultMessage;
		$bills->billsPayablePayStatus = $codeRes['data']['pay_status'];
		$res                          = $pay->save();
		$billRes                      = $bills->update();
		if (!$res || !$billRes) {
			container('logger')->error(__FUNCTION__, ['info' => '修改支付经办单的结果' . $res . "修改应付单状态的结果" . $billRes]);

			$res = \MqCommon::pushMQ(PAY_HANDLING_CREAT, $pay->toArray());
			if (!$res) {
				container('logger')->error(__FUNCTION__,
					['info' => '存储支付经办回单mq失败，数据为：' . json_encode($pay->toArray())]);
			}
			$transaction->rollback('获取支付详情修改失败！');
		}
		//判断如果是第三方的单子并且支付状态是支付成功或者支付失败，进行单据修改
		if (in_array($bills->billsPayableAccountType, \ThreeWithdrawal::TYPE) && in_array($pay->payHandlingPayStatus,
				[\PayHandling::PAY_COMPLETE, \PayHandling::PAY_FAIL])) {
			ThreeWithdrawal::updateStatus([
				'id'     => $bills->billsPayableAccountId,
				'status' => $pay->payHandlingPayStatus,
				'msg'    => \PayHandling::$payStatus[$pay->payHandlingPayStatus],
			], $transaction);
		}

		//放进获取支付回单的队列
		if ($codeRes['data']['pay_status'] == \PayHandling::PAY_COMPLETE) {
			$res = \MqCommon::pushMQ(PAY_HANDLING_RECEIPT, $pay->toArray());
			if (!$res) {
				container('logger')->error(__FUNCTION__,
					['info' => '存储支付经办回单mq失败，数据为：' . json_encode($pay->toArray())]);
			}

		}

		$transaction->commit();
	}

	/**
	 * 获取回单
	 *
	 * @throws \AMQPChannelException
	 * @throws \AMQPConnectionException
	 */
	public static function getReceipt()
	{
		$queue   = \MqCommon::getMQ(PAY_HANDLING_RECEIPT);
		$message = $queue->get();
		if (!$message) {
			container('logger')->info(__FUNCTION__, ['info' => "获取支付详情回单的队列为空！"]);
			throw new \Exception('获取支付详情回单的队列为空');
		}
		$data = $message->getBody();
		$queue->ack($message->getDeliveryTag());
		if (empty($data)) {
			container('logger')->info(__FUNCTION__, ['info' => "获取支付详情回单的队列为空！"]);
			throw new \Exception('获取支付详情回单的队列为空');
		}
		$data = json_decode($data, true);

		//调银企
		$param['business_type'] = $data['collectType'];
		$param['unique_id']     = $data['collectType'] == \Supplier::COMPANY_YES ? $data['payHandlingCode'] : $data['payHandlingOther'];
		$param['serial_number'] = $data['payHandlingOverCode'];
		$codeRes                = BankLink::getInstance()->getReceiptInfo($param);
		if (!$codeRes['success']) {
			$res = \MqCommon::pushMQ(PAY_HANDLING_RECEIPT, $data);
			if (!$res) {
				container('logger')->error(__FUNCTION__, ['info' => '存储支付经办回单mq失败,数据为：' . json_encode($data)]);
			}
			container('logger')->error(__FUNCTION__,
				['info' => $data['payHandlingCode'] . "获取支付回单失败！回单失败数据为：" . json_encode($codeRes)]);

			throw new \Exception('支付经办单的回单获取失败');

		}
		if (empty($codeRes['data']['file_name']) || empty($codeRes['data']['file_data'])) {
			$res = \MqCommon::pushMQ(PAY_HANDLING_RECEIPT, $data);
			if (!$res) {
				container('logger')->error(__FUNCTION__, ['info' => '存储支付经办回单mq失败,数据为：' . json_encode($data)]);
			}
			container('logger')->error(__FUNCTION__,
				['info' => $data['payHandlingCode'] . "获取支付回单失败！回单失败数据为：" . json_encode($codeRes)]);

			throw new \Exception('支付经办单的回单获取失败');
		}


		$receiptInfo = \PayHandling::findFirst([
			'payHandlingId = :id:',
			'bind' => [
				'id' => $data['payHandlingId'],
			],
		]);
		if (!$receiptInfo) {
			container('logger')->error(__FUNCTION__, ['info' => $data['payHandlingCode'] . "支付经办单不存在,无法进行回单数据更新！"]);

			throw new \Exception('支付经办单的回单获取发现支付经办单不存在');
		}

		$path = APP_PATH . '/public/files/';
		!is_dir($path) && mkdir($path, 0777, true);

		$file = $path . $codeRes['data']['file_name'];
		if (file_exists($file)) {
			@unlink($file);
		}
		file_put_contents($file, base64_decode($codeRes['data']['file_data']));
		$url = container('qcloud')->uploadFile($file);
		@unlink($file);
		$receiptInfo->payHandlingReceipt = $url;
		$res                             = $receiptInfo->update();
		if (!$res) {
			$res = \MqCommon::pushMQ(PAY_HANDLING_RECEIPT, $data);
			if (!$res) {
				container('logger')->error(__FUNCTION__, ['info' => '存储支付经办回单mq失败，数据为：' . json_encode($data)]);
			}
			throw new \Exception($receiptInfo->payHandlingCode . "修改失败,请继续重试");
		}

	}


	/**
	 * 获取回单
	 *
	 * @throws \Exception
	 */
	public static function getReturn($startTime, $endTime)
	{
		$data['start_time'] = $startTime;
		$data['end_time']   = $endTime;
		//查询在一周之内的付款支付经办的付款账户
		$res = \PayHandling::find([
			'isReturn = :returns: and payHandlingPayTime >= :starttime: and payHandlingPayTime <= :endtime: and isDel=:del:',
			'bind'    => [
				'returns'   => \PayHandling::RETURN_FALSE,
				'starttime' => strtotime($data['start_time']),
				'endtime'   => strtotime($data['end_time']),
				'del'       => \PayHandling::DEL_FALSE,
			],
			'columns' => 'payHandlingPayAccount,payHandlingId,payHandlingCode',
		])->toArray();
		if (empty($res)) {
			throw new \Exception('没有需要查询退票行为的支付经办单');
		}
		//获取这一周用过的付款账户
		$payAccount = array_unique(array_column($res, 'payHandlingPayAccount'));

		foreach ($payAccount as $k => $v) {
			$data['payment_account'] = $v;
			$res                     = BankLink::getInstance()->getDishonour($data);
			container('logger')->info(__FUNCTION__, ['info' => '拉取退票结果为：' . json_encode($res)]);
			if (!$res['success'] || empty($res['data'])) {
				container('logger')->info(__FUNCTION__, ['info' => '获取接口失败或者没有需要处理的退票数据,请求参数是：' . json_encode($data)]);

				continue;
			}
			foreach ($res['data'] as $key => $val) {
				$payHandling = \PayHandling::findFirst([
					'payHandlingCode = :code: and isReturn = :returns: and isDel=:del:',
					'bind' => [
						'code'    => $val['unique_order_id'],
						'returns' => \PayHandling::RETURN_FALSE,
						'del'     => \PayHandling::DEL_FALSE,
					],
				]);
				if (!$payHandling) {

					container('logger')->error(__FUNCTION__,
						['info' => $val['unique_order_id'] . '拉取退票修改数据的时候未查到符合条件的支付经办单：']);

					continue;
				}

				//修改数据
				$payHandling->isReturn             = \PayHandling::RETURN_TRUE;
				$payHandling->payHandlingPayStatus = \PayHandling::PAY_FAIL;
				$payHandling->resultMessage        = $val['error_msg'];
				if (!$payHandling->update()) {
					container('logger')->error(__FUNCTION__, ['info' => $val['unique_order_id'] . '拉取退票修改数据的时候修改失败：']);

					continue;
				}

			}


		}


	}

	/**
	 * 修改审批状态
	 *
	 * @param $data
	 * @throws \Exception
	 */
	public static function updateVerify($data)
	{
		if (empty($data['id'])) {
			throw new \Exception('请传入要修改的支付经办单号id');
		}
		if (empty($data['status'])) {
			throw new \Exception('请传入修改之后的审核状态');
		}
		$manager     = new \Phalcon\Mvc\Model\Transaction\Manager();
		$transaction = $manager->get();
		$payHandling = \PayHandling::findFirst([
			'payHandlingId = :id: and isDel = :del:',
			'bind'      => [
				'id'  => $data['id'],
				'del' => \PayHandling::DEL_FALSE,
			],
			'forUpdate' => true,
		]);

		if (!$payHandling) {
			$transaction->rollback('未查询到的支付经办单');
		}
		if ($data['status'] == \PayHandling::SEND_VERIFY_FAIL && $payHandling->payHandlingVerifyStatus != \PayHandling::VERIFY_NO) {
			$transaction->rollback('单据已修改过，无需再次修改');
		}
		$bill = \BillsPayable::findFirst([
			'billsPayableId = :id:',
			'bind' => [
				'id' => $payHandling->payHandlingBillsPayableId,
			],
		]);
		if (!$bill) {
			$transaction->rollback('不存在此单据关联的应付单');
		}

		//如果第三方订单审核失败，需要将应付单改为支付失败，并对第三方订单进行相应处理
		if ($data['status'] == \PayHandling::VERIFY_FAIL && in_array($bill->billsPayableAccountType,
				\ThreeWithdrawal::TYPE)) {
			ThreeWithdrawal::updateStatus([
				'id'     => $bill->billsPayableAccountId,
				'status' => \PayHandling::PAY_FAIL,
				'msg'    => '审批失败',
			], $transaction);
			$bill->billsPayablePayStatus = \BillsPayable::PAY_FAIL;
			if (!$bill->save()) {
				$transaction->rollback('修改应付单时出现错误');
			}

		}


		$payHandling->payHandlingVerifyStatus = $data['status'];
		$payHandling->resultMessage           = '';

		if (!empty($data['msg'])) {
			$payHandling->resultMessage = $data['msg'];

		}

		if (!$payHandling->update()) {
			$transaction->rollback('修改审批状态失败');
		}

		$transaction->commit();

		return true;
	}


	/**
	 * 获取审核的商户信息
	 *
	 * @param $payHandlingId
	 * @return mixed
	 * @throws \Exception
	 */
	public static function getSupplier($payHandlingId)
	{
		if (empty($payHandlingId)) {
			throw new \Exception("请传入支付经办单ID");
		}
		$payHandling = \PayHandling::findFirst([
			'payHandlingId = :id:',
			'bind' => [
				'id' => $payHandlingId,
			],
		]);
		if (!$payHandling) {
			throw new \Exception("支付经办单不存在");
		}

		$data['type']    = \PayHandling::BANK_TYPE;
		$data['name']    = $payHandling->suppliername;
		$data['open']    = $payHandling->collectBankOpen;
		$data['bank']    = $payHandling->collectBankBranch;
		$data['owner']   = $payHandling->collectName;
		$data['account'] = $payHandling->payHandlingCollectAccount;
		$data['money']   = $payHandling->payHandlingMoney;

		return $data;
	}

	/**
	 * 银转应付单列表
	 * @param $data
	 * @return array
	 */
	public static function getTransfer($data)
	{
		$res            = Tranfer::getLists($data['query'], $data['offest']);
		$supplierMaster = array_column($res, 'supplierMasterId');
		$supplierSign   = [];
		if (!empty($res)) {
			if (!empty($supplierMaster)) {
				$supplierSign = \SupplierMaster::find([
					'supplier_master_id in ({id:array})',
					'bind'    => [
						'id' => $supplierMaster,
					],
					'columns' => 'sign_contract_type,supplier_master_id',
				])->toArray();
				$supplierSign = array_column($supplierSign, 'sign_contract_type', 'supplier_master_id');
			}
			foreach ($res as $k => $v) {
				$res[$k]['time']             = empty($v['time']) ? '' : date('Y-m-d H:i:s', $v['time']);
				$res[$k]['currency']         = \SupplierMaster::$cointypeList[$v['currency']];
				$res[$k]['payStatus']        = $v['payStatus'] == '' ? '' : \Transfer::PAY_STATUS[$v['payStatus']];
				$res[$k]['supplierType']     = \SupplierMaster::$supplierType[$v['supplierType']];
				$res[$k]['orgId']            = $data['org'][$v['orgId']];
				$res[$k]['payTime']          = empty($v['payTime']) ? '' : date('Y-m-d H:i:s', $v['payTime']);
				$res[$k]['relationType']     = \Transfer::RELATION_TYPE[$v['relationType']];
				$res[$k]['shouldMoney']      = $v['shouldMoney'] / 100;
				$res[$k]['money']            = $v['money'] / 100;
				$res[$k]['signContractType'] = \SupplierMaster::$signContractTypeList[$supplierSign[$v['supplierMasterId']]];
			}

		}

		return $res;

	}

	/**
	 * 银转应付单详情
	 * @param $data
	 * @return array|\Phalcon\Mvc\Model
	 * @throws \Exception
	 */
	public static function transferDetail($data)
	{
		$res = \Transfer::findFirst([
			'transferId = :id:',
			'bind' => [
				'id' => $data['id'],
			],
		]);
		if (!$res) {
			throw new \Exception("不存在的银转应付单");
		}

		$res                 = $res->toArray();
		$res['time']         = empty($res['time']) ? '' : date('Y-m-d H:i:s', $res['time']);
		$res['currency']     = \SupplierMaster::$cointypeList[$res['currency']];
		$res['payStatus']    = $res['payStatus'] == '' ? '' : \Transfer::PAY_STATUS[$res['payStatus']];
		$res['supplierType'] = \SupplierMaster::$supplierType[$res['supplierType']];
		$res['orgId']        = $data['org'][$res['orgId']];
		$res['payTime']      = empty($res['payTime']) ? '' : date('Y-m-d H:i:s', $res['payTime']);
		$res['relationType'] = \Transfer::RELATION_TYPE[$res['relationType']];
		$res['shouldMoney']  = $res['shouldMoney'] / 100;
		$res['money']        = $res['money'] / 100;


		return $res;

	}


	/**
	 * 支付经办单下载
	 * @param $id
	 * @throws \Exception
	 */
	public static function download($id)
	{
		//查询所选的支付经办单是否符合条件，并将回单图片存进数组
		if (empty($id)) {
			throw new \Exception('请选择需要下载回单的支付经办单！');
		}
		$payHandling = \PayHandling::find([
			'payHandlingId IN ({ids:array})',
			'bind'    => [
				'ids' => $id,
			],
			'columns' => 'payHandlingReceipt,payHandlingCode',
		])->toArray();

		if (empty($payHandling) || count($payHandling) != count($id)) {
			throw new \Exception("请选择已返回回单的支付经办单进行下载！");
		}

		$files = array_filter(array_column($payHandling, 'payHandlingReceipt', 'payHandlingCode'));

		if (!count($files)) {
			throw new \Exception("请选择已返回回单的支付经办单进行下载！");
		}

		//压缩文件到压缩包中
		$pre     = date('Y-m-d', time()) . '.zip';
		$zipname = APP_PATH . '/public/files/' . $pre;
		$zip     = new \ZipArchive();
		$res     = $zip->open($zipname, \ZipArchive::CREATE);
		if ($res === true) {
			foreach ($files as $key => $file) {

				$zip->addFromString($key . '.pdf', file_get_contents($file));

			}
		}
		$zip->close();

		if (!file_exists($zipname)) {
			//即使创建，仍有可能失败。。。。
			throw new \Exception("无法找到文件");
		}

		//下载
		$fp        = fopen($zipname, "r");
		$file_size = filesize($zipname);//获取文件的字节
		Header("Content-type: application/octet-stream");
		Header("Accept-Ranges: bytes");
		Header("Content-Disposition: attachment; filename=$pre");
		$buffer     = 1024; //设置一次读取的字节数，每读取一次，就输出数据（即返回给浏览器）
		$file_count = 0; //读取的总字节数
		while (!feof($fp) && $file_count < $file_size) {
			$file_con   = fread($fp, $buffer);
			$file_count += $buffer;
			echo $file_con;
		}
		fclose($fp);
		if ($file_count >= $file_size) {
			unlink($zipname);
		}

		@readfile($zipname);


	}


	/**
	 * 银转应付单下载
	 * @param $id
	 * @throws \Exception
	 */
	public static function downloadTransfer($id)
	{
		//查询所选的支付经办单是否符合条件，并将回单图片存进数组
		if (empty($id)) {
			throw new \Exception('请选择需要下载回单的银转应付单！');
		}
		$transfer = \Transfer::find([
			'transferId IN ({ids:array})',
			'bind'    => [
				'ids' => $id,
			],
			'columns' => 'transferCode,enclosure',
		])->toArray();

		if (empty($transfer) || count($transfer) != count($id)) {
			throw new \Exception("请选择已上传付款凭证的银转应付单进行下载！");
		};

		$files = array_filter(array_column($transfer, 'enclosure', 'transferCode'));

		if (!count($files)) {
			throw new \Exception("请选择已上传付款凭证的银转应付单进行下载！");
		}

		//压缩文件到压缩包中
		$pre     = date('Y-m-d', time()) . '.zip';
		$zipname = APP_PATH . '/public/files/' . $pre;
		$zip     = new \ZipArchive();
		$res     = $zip->open($zipname, \ZipArchive::CREATE);
		if ($res === true) {
			foreach ($files as $key => $file) {
				$extension = substr($file, strripos($file, '.'));
				$zip->addFromString($key . $extension, file_get_contents($file));

			}
		}
		$zip->close();

		if (!file_exists($zipname)) {
			exit("无法找到文件"); //即使创建，仍有可能失败。。。。
		}

		//下载
		$fp        = fopen($zipname, "r");
		$file_size = filesize($zipname);//获取文件的字节
		Header("Content-type: application/octet-stream");
		Header("Accept-Ranges: bytes");
		Header("Content-Disposition: attachment; filename=$pre");
		$buffer     = 1024; //设置一次读取的字节数，每读取一次，就输出数据（即返回给浏览器）
		$file_count = 0; //读取的总字节数
		while (!feof($fp) && $file_count < $file_size) {
			$file_con   = fread($fp, $buffer);
			$file_count += $buffer;
			echo $file_con;
		}
		fclose($fp);
		if ($file_count >= $file_size) {
			unlink($zipname);
		}

		@readfile($zipname);


	}


	/**
	 * 创建银转应付单
	 * @param $param
	 * @return mixed
	 * @throws \Exception
	 */
	public static function createTransfer($param, TransactionInterface $transaction)
	{
		if (empty($param['time']) || empty($param['relation_code']) || empty($param['supplier_master_id'])) {
			$transaction->rollback("必传参数不允许为空");
		}
		$data['transferCode']     = self::getTransferCode();
		$data['time']             = $param['time'];      //单据日期
		$data['relationCode']     = $param['relation_code']; //关联的单据编号
		$data['relationType']     = $param['relation_type']; //关联单据类型
		$data['shouldMoney']      = $param['should_money'];//应付金额
		$data['money']            = $param['money'];//实付金额
		$data['supplierMasterId'] = $param['supplier_master_id'];//商户id
		$data['supplierCode']     = $param['supplier_code'];//商户code
		$data['supplierType']     = $param['supplier_type'];//商户的类型
		$data['orgId']            = $param['org_id'];//组织id
		$data['relationId']       = $param['relation_id']; //关联的单据类型id
		$data['supplierName']     = $param['supplier_name']; //商户名字
		if (empty($data['shouldMoney']) || empty($data['money'])) {
			$transaction->rollback('付款金额不能为0');
		}
		$one = \Transfer::findFirst([
			'relationCode = :code:',
			'bind' => [
				'code' => $data['relationCode'],
			],
		]);
		if ($one) {
			$transaction->rollback('银转应付单已创建');
		}
		$supplier = \SupplierMaster::findFirst([
			'supplier_master_id = :id:',
			'bind' => [
				'id' => $data['supplierMasterId'],
			],
		]);
		if (!$supplier) {
			$transaction->rollback("商户不存在");
		}
		$data['bankhead']    = $supplier->bankhead;
		$data['bankbranch']  = $supplier->bankbranch;
		$data['bankaccount'] = $supplier->bankaccount;
		$data['holder']      = $supplier->holder;
		$res                 = Tranfer::create($data, $transaction);
		if (!$res) {
			$transaction->rollback("银转应付单添加失败，请重试");
		}

		return $data;
	}

	/**
	 * 生成支付经办单号
	 */
	public static function getTransferCode()
	{
		$date     = date('ymd', time());
		$rediskey = 'YZYF' . $date;
		$key      = container('cache')->increment($rediskey);
		$key      = \YHDX\OrderCodeGenerated::dispRepair($key, 4, 0);
		$result   = 'YZYF' . $date . $key;

		return $result;
	}

	/**
	 * 修改银转应付单
	 * @param $data
	 * @throws \Exception
	 */
	public static function updateTransfer($data)
	{

		$manager     = new Manager();
		$transaction = $manager->get();
		try{
			//修改银企应付单的字段值，上传人id,上传人姓名，付款时间，备注，付款凭证
			$transfer = \Transfer::findFirst([
				'transferId = :id: and payStatus = :status:',
				'bind' => [
					'id'     => $data['transId'],
					'status' => \Transfer::PAY_WAIT,
				],
			]);
			if (!$transfer) {
				$transaction->rollback("不存在的银转应付单");
			}
			$oldData = [
			    'payTime'=>$transfer->payTime,
			    'remark'=>$transfer->remark,
			    'enclosure'=>$transfer->enclosure,
			    'people'=>$transfer->people,
			    'name'=>$transfer->name,
			    'payStatus'=>$transfer->payStatus,
            ];
			$transfer->payTime = time();
			$transfer->remark  = $data['note'];
			if (!empty($data['upyun_file_path'])) {
				$transfer->enclosure = $data['upyun_file_path'];
			}
			$transfer->people    = $data['uid'];
			$transfer->name      = $data['uname'];
			$transfer->payStatus = \Transfer::PAY_COMPLETE;

			$newData = [
                'payTime'=>$transfer->payTime,
                'remark'=>$transfer->remark,
                'enclosure'=>$transfer->enclosure,
                'people'=>$transfer->people,
                'name'=>$transfer->name,
                'payStatus'=>$transfer->payStatus,
            ];

			if (!$transfer->save()) {
				$transaction->rollback("付款出现错误，请重试");
			}
			//塞进队列
			$mqData['code']   = $transfer->relationCode;
			$mqData['status'] = true;
			WalletServices::addHandleWithdrawMsg($transaction, $mqData);
			$transaction->commit();

			//推送用户服务中心
			MqServices::pushOperationLogMq(OperationAction::PAY_TRANSLIST_UPLOAD,$newData,$oldData,$data['transId']);

		} catch (\Exception $e) {
			$transaction->isValid() && $transaction->rollback($e->getMessage());
			throw new \Exception($e->getMessage());
		}

	}

	/**
	 * 组装sql
	 * @param array $where
	 * @return mixed
	 */
	public static function orderSearchConditions(array $where)
	{
		$orgId         = $where['orgId'];
		$payEndDate    = $where['payenddate'];
		$payStartDate  = $where['paystartdate'];
		$createDate    = $where['startdate'];
		$createEndDate = $where['enddate'];
		$payHandlingPayStatus = $where['payHandlingPayStatus'] ?? 0;
		$payHandlingVerifyStatus = $where['payHandlingVerifyStatus'] ?? 0;
		$payHandlingCode = $where['payHandlingCode'] ?? 0;
		unset($where['orgId'], $where['paystartdate'], $where['payenddate'], $where['startdate'], $where['enddate'], $where['payHandlingPayStatus'], $where['payHandlingVerifyStatus'], $where['payHandlingCode']);

		$where = filterEmpty($where);

		$query = \Phalcon\Mvc\Model\Criteria::fromInput(\Phalcon\Di::getDefault(), 'PayHandling', $where);

		if (!empty($payStartDate) && !empty($payEndDate)) {
			$payStartDate = strtotime(date($payStartDate . " 00:00:00"));
			$payEndDate   = strtotime(date($payEndDate . ' 23:59:59'));
			$query->betweenWhere('payHandlingPayTime', $payStartDate, $payEndDate);
		}
		if (!empty($createDate) && !empty($createEndDate)) {
			$createDate    = strtotime(date($createDate . " 00:00:00"));
			$createEndDate = strtotime(date($createEndDate . ' 23:59:59'));
			$query->betweenWhere('payHandlingHopeTime', $createDate, $createEndDate);
		}

		if ($orgId) {
			$query->addWhere(' orgId IN(' . implode(',', $orgId) . ')');
		}

		if($payHandlingPayStatus){
            $query->addWhere(' payHandlingPayStatus IN(' . $payHandlingPayStatus . ')');
        }

        if($payHandlingVerifyStatus){
            $query->addWhere(' payHandlingVerifyStatus IN(' . $payHandlingVerifyStatus . ')');
        }

        if($payHandlingCode){
            $query->addWhere(" payHandlingCode IN('" . implode("','", $payHandlingCode) . "')");
        }

		if(count(explode(',',$payHandlingPayStatus))>1 || count(explode(',',$payHandlingVerifyStatus))>1){
            return $query;
        }

		$query->orderBy('payHandlingVerifyStatus DESC,payHandlingPayStatus ASC,payHandlingPayTime ASC');
		return $query;
	}

	/**
	 * 导出数据整理
	 * @param array $conditions
	 * @return array
	 */
	public static function orderInfoHandle(array $conditions): array
	{
		$data = \PayHandling::find($conditions)->toArray();
		if (empty($data)) {
			return $data;
		}

		$supplierId   = array_values(array_unique(array_column($data, 'supplierMasterId')));
		$payAccountId = array_values(array_unique(array_column($data, 'payHandlingPayAccountId')));

		$supplier = \SupplierMaster::find([
			'supplier_master_id IN ({ids:array})',
			'bind'    => [
				'ids' => $supplierId,
			],
			'columns' => 'sign_contract_type,supplier_master_id,name',
		])->toArray();

		$supplierArr = array_column($supplier, null, 'supplier_master_id');

		$payAccount = \PayAccount::find([
			'payAccountId IN ({id:array})',
			'bind'    => [
				'id' => $payAccountId,
			],
			'columns' => 'payAccountId,registeredCodeName',
		])->toArray();

		$payAccountArr = array_column($payAccount, 'registeredCodeName', 'payAccountId');

		$orgList = array_column(container('orgList'), 'name', 'org_id');

		$ret = [];
		foreach ($data as $value) {
			$ret[] = [
				'org'                         => $orgList[$value['orgId']],
				'type'                        => \SupplierMaster::$supplierType[$value['type']],
				'payHandlingVerifyStatus'     => \PayHandling::$verifyStatus[$value['payHandlingVerifyStatus']],
				'payHandlingPayStatus'        => \PayHandling::$payStatus[$value['payHandlingPayStatus']],
				'isReturn'                    => \PayHandling::$return[$value['isReturn']],
				'name'                        => $value['collectName'],
				'supplier_master_id'          => $value['supplierMasterId'],
				'supplierName'                => $supplierArr[$value['supplierMasterId']]['name'],
				'signContractType'            => \SupplierMaster::$signContractTypeList[$supplierArr[$value['supplierMasterId']]['sign_contract_type']],
				'payHandlingCollectAccount'   => $value['payHandlingCollectAccount'],
				'payHandlingMoney'            => fen2yuan($value['payHandlingMoney']),
				'payHandlingReceipt'          => empty($value['payHandlingReceipt']) ? '' : $value['payHandlingReceipt'],
				'open'                        => $value['collectBankOpen'],
				'bank'                        => $value['collectBankBranch'],
				'payHandlingRemark'           => $value['payHandlingRemark'],
				'payAccountName'              => $payAccountArr[$value['payHandlingPayAccountId']],
				'payHandlingPayAccount'       => $value['payHandlingPayAccount'],
				'payHandlingType'             => \PayHandling::$remittanceType[$value['payHandlingType']],
				'payHandlingMode'             => \PayHandling::$settlementType[$value['payHandlingMode']],
				'payHandlingCurrency'         => \SupplierMaster::$cointypeList[$value['payHandlingCurrency']],
				'payHandlingCode'             => $value['payHandlingCode'],
				'payHandlingPayTime'          => empty($value['payHandlingPayTime']) ? '' : date('Y-m-d H:i:s',
					$value['payHandlingPayTime']),
				'payHandlingHopeTime'         => date('Y-m-d H:i:s', $value['payHandlingHopeTime']),
				'payHandlingOverCode'         => empty($value['payHandlingOverCode']) ? '' : $value['payHandlingOverCode'],
				'number'                      => $value['payHandlingCollectAccount'],
				'payHandlingPurpose'          => $value['payHandlingPurpose'],
				'payHandlingBillsPayableCode' => $value['payHandlingBillsPayableCode'],
				'dingCode'                    => $value['dingCode'],
				'resultMessage'               => $value['resultMessage'],
			];
		}

		return $ret;
	}

    /**
     * uo
     * @param $date
     * @return array|mixed
     */
	public static function getStatList($date)
    {
        $currentTime =  date('Y-m-d H', $date);
        $key = 'biw_every_hour_' . $currentTime;
        $redis = container('redis');
        $statInfo = $redis->get($key);
        if ($currentTime && empty($statInfo)) {
            $statInfo = [];
            //审批流缺失总数量
            $statInfo['missing_approval_flow'] = self::getNumByStatus([\PayHandling::SEND_VERIFY_FAIL]);
            //待审核总量
            $statInfo['pending_review'] = self::getNumByStatus([\PayHandling::VERIFY_WAITE,\PayHandling::STATUS_IN_APPROVAL]);
            //银行接口调用中总数量
            $statInfo['bank_interface_calls'] = (new \PayHandlingRouteErr())->errCount();
            //支付失败总数量
            $statInfo['failed_payments'] = self::getNumByPay([\PayHandling::PAY_FAIL,\PayHandling::CREATE_FAIL]);
            $statInfo['date'] = date('Y-m-d H:00:00',$date);
            $statInfo['login_exception'] = 0;//
            $redis->set($key, json_encode($statInfo), SECONDS_ONE_HOURS);
            return $statInfo;
        }
        return json_decode($statInfo,true);
    }

    /**
     * @param $array
     * @return mixed
     */
    public static function getNumByStatus($array)
    {
        $query = new \Phalcon\Mvc\Model\Criteria();
        $query->inWhere('payHandlingVerifyStatus', $array);
        $query->andWhere('isDel=1');
        return \PayHandling::count($query->getParams());
    }

    /**
     * @param $array
     * @return mixed
     */
    public static function getNumByPay($array)
    {
        $query = new \Phalcon\Mvc\Model\Criteria();
        $query->inWhere('payHandlingPayStatus', $array);
        $query->andWhere('isDel=1');
        return \PayHandling::count($query->getParams());
    }

    /**
     * @param $where
     * @param $offset
     * @return array
     */
    public static function getErrCode($offset): array
    {
        $list = [];
        $query = new \Phalcon\Mvc\Model\Criteria();
        $query->where('err_code',\PayHandlingRouteErr::IS_FRONT_ERR);
        $query->orderBy('pay_handling_code DESC');
        $res = \PayHandlingRouteErr::getLimitList($query->getParams(), (int)$offset);
        $count = \PayHandlingRouteErr::count($query->getParams());
        if($res){
            $list = array_column($res, 'pay_handling_code');
        }
        return ['num'=>$count,'list'=>$list];
    }
}


